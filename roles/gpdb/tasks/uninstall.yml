---
# Install Greenplum Database on Red Hat / CentOS

# new installation: {{ gpdb_base_dir }}/greenplum-db must not exist
#          upgrade: {{ gpdb_base_dir }}/greenplum-db-{ new version } must not exist
#       linkchange: {{ gpdb_base_dir }} /greenplum-db points to another directory

- name: Detect Google Cloud
  stat: path=/etc/yum.repos.d/google-cloud.repo
  register: google_cloud_detect

- name: Register Google Cloud
  set_fact:
    google_cloud: true
  when: google_cloud_detect.stat.exists

- name: Check if any version of Greenplum Database is already installed
  stat: path={{ gpdb_base_dir }}/greenplum-db
  register: gpdb_installed

- name: Check if the Greenplum Database version is already installed
  stat: path={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}
  register: gpdb_version_installed

- name: Sanity check for {{ gpdb_base_dir }}/greenplum-db
  fail: msg="{{ gpdb_base_dir }}/greenplum-db is supposed to be a symlink!"
  when: gpdb_installed.stat.exists == True and gpdb_installed.stat.islnk != True

###########################################################
# Database installation

- name: Create empty variable for data directories
  set_fact: data_dirs=""
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - gpdb_install == True

- name: Create empty variable for mirror data directories
  set_fact: mirror_data_dirs=""
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - gpdb_mirror_enable == True and gpdb_install == True

- name: Loop over number for primary segments
  #debug: msg="data_dirs={{ item }}"
  set_fact: data_dirs="{{ data_dirs | replace('^ *', '') }} {{ gpdb_data_dir }}/primary"
  with_sequence: start=1 end={{ gpdb_number_segments }} stride=1
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - gpdb_install == True

- name: Loop over number for mirror segments
  #debug: msg="data_dirs={{ item }}"
  set_fact: mirror_data_dirs="{{ mirror_data_dirs | replace('^ *', '') }} {{ gpdb_data_dir }}/mirror"
  with_sequence: start=1 end={{ gpdb_number_segments }} stride=1
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - gpdb_mirror_enable == True and gpdb_install == True

- name: Copy removal script
  copy: src=remove_gpdb_installation.sh dest=/root/remove_gpdb_installation.sh mode=0755 owner=root group=root
  when:
    - inventory_hostname in groups['master']

- name: Copy Greenplum Database {{ gpdb_major_version }} {{ gpdb_binary_type }} file
  copy: src={{ binary_installer_file }}.zip dest=/home/gpadmin/{{ binary_installer_file }}.zip mode=0644 owner=gpadmin group=gpadmin
  when:
    - gpdb_binary_type == 'zip'

- name: Copy Greenplum Database {{ gpdb_major_version }} {{ gpdb_binary_type }} file
  copy: src={{ binary_installer_file }}.rpm dest=/home/gpadmin/{{ binary_installer_file }}.rpm mode=0644 owner=gpadmin group=gpadmin
  when:
    - gpdb_binary_type == 'rpm'

- name: Remove old temp installer directory
  file: path=/home/gpadmin/gpdb{{ gpdb_major_version }}-tmp-install state=absent
  changed_when: False
  when:
    - gpdb_install == True or gpdb_upgrade == True
    #  - inventory_hostname in groups['master']

- name: Check if database is running
  stat: path=/tmp/.s.PGSQL.5432
  register: gpdb_running
  when:
    - inventory_hostname in groups['master']
    - gpdb_upgrade == True or gpdb_linkchange == True

- name: Shutdown database
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpstop -a )
  async: 60
  poll: 5
  when:
   - inventory_hostname in groups['master']
   - (gpdb_upgrade == True or gpdb_linkchange == True) and gpdb_running.stat.exists == True

- name: Install Greenplum Database software in {{ gpdb_base_dir }}
  become_user: gpadmin
  command: /home/gpadmin/gpdb{{ gpdb_major_version }}-tmp-install/{{ binary_installer_file }}.bin
  async: 60
  poll: 5
  when:
    - gpdb_install == True or gpdb_upgrade == True
    - gpdb_initdb_single == False and seg_serialized_install == False
    - gpdb_binary_type != 'rpm'

- name: Install Greenplum Database software in {{ gpdb_base_dir }}
  yum:
    name: /home/gpadmin/{{ binary_installer_file }}.rpm
    state: present
  async: 60
  poll: 5
  when:
    - gpdb_install == True or gpdb_upgrade == True
    - gpdb_initdb_single == False and seg_serialized_install == False
    - gpdb_binary_type == 'rpm'

- name: Fix ownership for {{ gpdb_base_dir }}/greenplum-db
  file: path={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }} state=directory mode=0755 owner=gpadmin group=gpadmin recurse=yes
  when:
    - gpdb_binary_type == 'rpm'

- name: Remove temp installer directory
  file: path=/home/gpadmin/gpdb{{ gpdb_major_version }}-tmp-install state=absent
  changed_when: False
  when:
    - gpdb_install == True or gpdb_upgrade == True
    # - gpdb_major_version == 5 or gpdb_major_version == 4
    # - inventory_hostname in groups['master']

- name: Check again if the Greenplum Database version is already installed
  stat: path={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}
  register: gpdb_version_installed_verify
  #when:
  #  - inventory_hostname in groups['master']

- name: Stop if Greenplum Database software is not installed
  fail: msg="Greenplum Database software is not installed!"
  when:
    - gpdb_version_installed_verify.stat.exists != True
      #  - inventory_hostname in groups['master']


# Status: database software is installed
###########################################################
# Database initialization

- name: Copy gpinitsystem config file for single node
  command: creates=/home/gpadmin/gpinitsystem_config cp -a {{ gpdb_base_dir }}/greenplum-db/docs/cli_help/gpconfigs/gpinitsystem_singlenode /home/gpadmin/gpinitsystem_config
  when:
   - inventory_hostname in groups['master']
   - gpdb_install == True and gpdb_initdb_single == True

- name: Copy gpinitsystem config file for multiple nodes
  command: creates=/home/gpadmin/gpinitsystem_config cp -a {{ gpdb_base_dir }}/greenplum-db/docs/cli_help/gpconfigs/gpinitsystem_config /home/gpadmin/gpinitsystem_config
  when:
    - inventory_hostname in groups['master']
    - gpdb_install == True and gpdb_initdb_single == False

- name: Create hostfile file for single node
  become_user: root
  shell: "rm -f {{ playbook_dir }}/hostfile; sed -n $(( $( grep -n master {{ playbook_dir }}/ansible-hosts | cut -d ':' -f 1 ) + 1 ))p {{ playbook_dir }}/ansible-hosts | awk '{print $1}' > {{ playbook_dir }}/hostfile"
  delegate_to: 127.0.0.1
  when:
    - inventory_hostname in groups['master']
    - gpdb_install == True and gpdb_initdb_single == True

- name: Create hostfile file for multiple nodes
  become_user: root
  shell: "rm -f {{ playbook_dir }}/hostfile;  tail -n +$(($( grep -n segments {{ playbook_dir }}/ansible-hosts | cut -d ':' -f 1 ) + 1)) {{ playbook_dir }}/ansible-hosts | awk '{print $1}' >> {{ playbook_dir }}/hostfile"
  delegate_to: 127.0.0.1
  when:
    - inventory_hostname in groups['master']
    - gpdb_install == True and gpdb_initdb_single == False

- name: Appened Standby Master hostname into hostfile
  become_user: root
  shell: "head -n $(($( grep -n standby {{ playbook_dir }}/ansible-hosts | cut -d ':' -f 1 ) + 1 )) {{ playbook_dir }}/ansible-hosts | sed '$!d' | awk '{print $1}' >> {{ playbook_dir }}/hostfile"
  delegate_to: 127.0.0.1
  when:
    - inventory_hostname in groups['master']
    - gpdb_install == True and gpdb_initdb_single == False and gpdb_initdb_with_standby == True

- name: Copy hostfile files
  copy: src={{ playbook_dir }}/hostfile dest=/home/gpadmin/hostfile owner=gpadmin group=gpadmin mode=0644
  when:
    - inventory_hostname in groups['master']
    - gpdb_install == True

- name: Fix permissions and ownership for gpinitsystem config file and hostlist file
  file: path=/home/gpadmin/{{ item.path }} owner={{ item.owner }} group={{item.group }} mode={{ item.mode }}
  with_items:
    - { path: 'gpinitsystem_config', owner: 'gpadmin', group: 'gpadmin', mode: '0664' }
    - { path: 'hostfile', owner: 'gpadmin', group: 'gpadmin', mode: '0700' }
  when:
    - inventory_hostname in groups['master']
    - gpdb_install == True

- name: Fix hostname in hostlist file
  replace: dest=/home/gpadmin/hostfile regexp='^replace_this_with_hostname_of_your_machine$' replace='{{ ansible_hostname }}'
  when:
    - inventory_hostname in groups['master']
    - gpdb_install == True

- name: Fix settings in gpinitsystem config file
  lineinfile:
    dest: /home/gpadmin/gpinitsystem_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^MACHINE_LIST_FILE=', line: 'MACHINE_LIST_FILE=/home/gpadmin/hostfile', state: present }
    - { regexp: '^declare -a DATA_DIRECTORY=', line: 'declare -a DATA_DIRECTORY=({{ data_dirs }} )', state: present 
}
    - { regexp: '^MASTER_HOSTNAME=', line: 'MASTER_HOSTNAME={{ ansible_hostname }}', state: present }
    - { regexp: '^MASTER_DIRECTORY=', line: 'MASTER_DIRECTORY={{ gpdb_data_dir }}/master', state: present }
    - { regexp: '^#?DATABASE_NAME=', line: 'DATABASE_NAME=gpadmin', state: present }
  when:
    - inventory_hostname in groups['master']
    - gpdb_install == True
 
- name: Fix settings in gpinitsystem config file when enabling mirror
  lineinfile:
    dest: /home/gpadmin/gpinitsystem_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^#MIRROR_PORT_BASE=', line: 'MIRROR_PORT_BASE=21000', state: present }
    - { regexp: '^#REPLICATION_PORT_BASE=', line: 'REPLICATION_PORT_BASE=22000', state: present }
    - { regexp: '^#MIRROR_REPLICATION_PORT_BASE=', line: 'MIRROR_REPLICATION_PORT_BASE=23000', state: present }
    - { regexp: '^#declare -a MIRROR_DATA_DIRECTORY=', line: 'declare -a MIRROR_DATA_DIRECTORY=({{ mirror_data_dirs 
}} )', state: present }
  when:
    - inventory_hostname in groups['master']
    - gpdb_install == True and gpdb_mirror_enable == True

- name: Repoint symlink to new Greenplum Database version
  file: path={{ gpdb_base_dir }}/greenplum-db src={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }} state=link
  when:
    - gpdb_linkchange == True and gpdb_install == True
      # - gpdb_upgrade == True or gpdb_linkchange == True and gpdb_install == True

  # - inventory_hostname in groups['master']

# Status: Config files ready, initialize database if required

# check if the 'known_hosts' file exists - this is taken as sign that the ssh key exchange happened before
# that is not very reliable
- name: Check if the ssh login for gpadmin is already setup
  stat: path=/home/gpadmin/.ssh/known_hosts
  register: ssh_initialized_gpadmin

- name: Check if the ssh login for root is already setup
  stat: path=/root/.ssh/known_hosts
  register: ssh_initialized_root

- name: Check if the database is already initialized
  stat: path={{ gpdb_data_dir }}
  register: gpdb_initialized

- name: Create {{ gpdb_data_dir }} directories
  file: path={{ item.path }} state=directory owner=gpadmin group=gpadmin mode=0770
  with_items:
    - { path: '{{ gpdb_data_dir }}' }
  when:
   - gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True

- name: Create {{ gpdb_data_dir }}/master directories for mdw and smdw
  file: path={{ item.path }} state=directory owner=gpadmin group=gpadmin mode=0770
  with_items:
    - { path: '{{ gpdb_data_dir }}/master' }
  when:
   - inventory_hostname in groups['master'] or inventory_hostname in groups['standby']
   - gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True

- name: Create {{ gpdb_data_dir }} segment directories
  file: path={{ gpdb_data_dir }}/primary state=directory owner=gpadmin group=gpadmin mode=0770
  when:
   - gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True

- name: Create {{ gpdb_data_dir }} segment directories
  file: path={{ gpdb_data_dir }}/mirror state=directory owner=gpadmin group=gpadmin mode=0770
  when:
   - gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True
   - gpdb_mirror_enable == True

- name: Install greeplum binary into segment nodes by running gpseginstall
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpseginstall -f /home/gpadmin/hostfile )
  async: 120
  poll: 5
  register: gpseginstall_installed
  when:
    - inventory_hostname in groups['master']
    - gpdb_initialized.stat.exists != True
    - gpdb_initdb_single == False and seg_serialized_install == True
  # changed_when: False

      #- name: Repoint symlink to new Greenplum Database version
      #file: path={{ gpdb_base_dir }}/greenplum-db src={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }} state=link
  # when:
  # - gpseginstall_installed == True

- name: Initialize Greenplum Database cluster
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpinitsystem -a -c /home/gpadmin/gpinitsystem_config -h /home/gpadmin/hostfile {{ gpdb_spread_mirrors }} )
  async: 300
  poll: 5
  register: init_db
  when:
    - inventory_hostname in groups['master']
    - gpdb_initdb_with_standby == False
  failed_when: init_db.rc > 1

- name: Initialize Greenplum Database cluster with standby master
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpinitsystem -c /home/gpadmin/gpinitsystem_config -a {{ gpdb_spread_mirrors }} -h /home/gpadmin/hostfile -s {{ smdw_hostname }} )
  async: 300
  poll: 5
  register: init_db
  when:
    - inventory_hostname in groups['master']
    - gpdb_initdb_with_standby == True
  failed_when: init_db.rc > 1

# the greenplum_path.sh from the new installation does not have $MASTER_DATA_DIRECTORY
- name: Add MASTER_DATA_DIRECTORY to greenplum_path.sh
  lineinfile:
    dest: "{{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}/greenplum_path.sh"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^export MASTER_DATA_DIRECTORY=', line: 'export MASTER_DATA_DIRECTORY={{ gpdb_data_dir }}/master/gpseg-1', state: present }
  when:
    - gpdb_install == True or gpdb_upgrade == True

- name: Start Greenplum Database after upgrade
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpstart -a )
  async: 60
  poll: 5
  when:
    - inventory_hostname in groups['master']
    - gpdb_upgrade == True or gpdb_linkchange == True

- name: Check if database is running
  stat: path=/tmp/.s.PGSQL.5432
  register: gpdb_running_nothing
  when:
    - inventory_hostname in groups['master']
    - gpdb_install == False and gpdb_upgrade == False and gpdb_linkchange == False

- name: Start database
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpstart -a )
  async: 60
  poll: 5
  when:
    - inventory_hostname in groups['master']
    - (gpdb_install == False and gpdb_upgrade == False and gpdb_linkchange == False) and gpdb_running_nothing.stat.exists == False

- name: Verify that Greenplum Database is up and running
  become_user: gpadmin
  changed_when: False
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && psql -c "SELECT VERSION()" )
  register: select_version
  when: inventory_hostname in groups['master']
  failed_when: "'(Greenplum Database ' not in select_version.stdout"

- name: Greenplum Database Installation
  debug: msg="Greenplum Database {{ gpdb_major_version }}.{{ gpdb_minor_version }} installed"
  when: gpdb_install == True

- name: Greenplum Database Upgrade
  debug: msg="Greenplum Database {{ gpdb_major_version }}.{{ gpdb_minor_version }} upgraded"
  when: gpdb_upgrade == True

- name: Greenplum Database Version switched
  debug: msg="Greenplum Database {{ gpdb_major_version }}.{{ gpdb_minor_version }} is active"
  when: gpdb_linkchange == True

# Status: Greenplum Database up and running
# FIXME: update bash history
